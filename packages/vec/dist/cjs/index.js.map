{
  "version": 3,
  "sources": ["../../src/index.ts"],
  "sourcesContent": ["export class Vec {\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clamp(n: number, min: number): number\n  static clamp(n: number, min: number, max: number): number\n  static clamp(n: number, min: number, max?: number): number {\n    return Math.max(min, typeof max !== 'undefined' ? Math.min(n, max) : n)\n  }\n\n  /**\n   * Clamp a value into a range.\n   * @param n\n   * @param min\n   */\n  static clampV(A: number[], min: number): number[]\n  static clampV(A: number[], min: number, max: number): number[]\n  static clampV(A: number[], min: number, max?: number): number[] {\n    return A.map((n) => (max ? Vec.clamp(n, min, max) : Vec.clamp(n, min)))\n  }\n\n  /**\n   * Negate a vector.\n   * @param A\n   */\n  static neg = (A: number[]): number[] => {\n    return [-A[0], -A[1]]\n  }\n\n  /**\n   * Add vectors.\n   * @param A\n   * @param B\n   */\n  static add = (A: number[], B: number[]): number[] => {\n    return [A[0] + B[0], A[1] + B[1]]\n  }\n\n  /**\n   * Add scalar to vector.\n   * @param A\n   * @param B\n   */\n  static addScalar = (A: number[], n: number): number[] => {\n    return [A[0] + n, A[1] + n]\n  }\n\n  /**\n   * Subtract vectors.\n   * @param A\n   * @param B\n   */\n  static sub = (A: number[], B: number[]): number[] => {\n    return [A[0] - B[0], A[1] - B[1]]\n  }\n\n  /**\n   * Subtract scalar from vector.\n   * @param A\n   * @param B\n   */\n  static subScalar = (A: number[], n: number): number[] => {\n    return [A[0] - n, A[1] - n]\n  }\n\n  /**\n   * Get the vector from vectors A to B.\n   * @param A\n   * @param B\n   */\n  static vec = (A: number[], B: number[]): number[] => {\n    // A, B as vectors get the vector from A to B\n    return [B[0] - A[0], B[1] - A[1]]\n  }\n\n  /**\n   * Vector multiplication by scalar\n   * @param A\n   * @param n\n   */\n  static mul = (A: number[], n: number): number[] => {\n    return [A[0] * n, A[1] * n]\n  }\n\n  /**\n   * Multiple two vectors.\n   * @param A\n   * @param B\n   */\n  static mulV = (A: number[], B: number[]): number[] => {\n    return [A[0] * B[0], A[1] * B[1]]\n  }\n\n  /**\n   * Vector division by scalar.\n   * @param A\n   * @param n\n   */\n  static div = (A: number[], n: number): number[] => {\n    return [A[0] / n, A[1] / n]\n  }\n\n  /**\n   * Vector division by vector.\n   * @param A\n   * @param n\n   */\n  static divV = (A: number[], B: number[]): number[] => {\n    return [A[0] / B[0], A[1] / B[1]]\n  }\n\n  /**\n   * Perpendicular rotation of a vector A\n   * @param A\n   */\n  static per = (A: number[]): number[] => {\n    return [A[1], -A[0]]\n  }\n\n  /**\n   * Dot product\n   * @param A\n   * @param B\n   */\n  static dpr = (A: number[], B: number[]): number => {\n    return A[0] * B[0] + A[1] * B[1]\n  }\n\n  /**\n   * Cross product (outer product) | A X B |\n   * @param A\n   * @param B\n   */\n  static cpr = (A: number[], B: number[]): number => {\n    return A[0] * B[1] - B[0] * A[1]\n  }\n\n  /**\n   * Cross (for point in polygon)\n   *\n   */\n  static cross(x: number[], y: number[], z: number[]): number {\n    return (y[0] - x[0]) * (z[1] - x[1]) - (z[0] - x[0]) * (y[1] - x[1])\n  }\n\n  /**\n   * Length of the vector squared\n   * @param A\n   */\n  static len2 = (A: number[]): number => {\n    return A[0] * A[0] + A[1] * A[1]\n  }\n\n  /**\n   * Length of the vector\n   * @param A\n   */\n  static len = (A: number[]): number => {\n    return Math.hypot(A[0], A[1])\n  }\n\n  /**\n   * Project A over B\n   * @param A\n   * @param B\n   */\n  static pry = (A: number[], B: number[]): number => {\n    return Vec.dpr(A, B) / Vec.len(B)\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static uni = (A: number[]): number[] => {\n    return Vec.div(A, Vec.len(A))\n  }\n\n  /**\n   * Get normalized / unit vector.\n   * @param A\n   */\n  static normalize = (A: number[]): number[] => {\n    return Vec.uni(A)\n  }\n\n  /**\n   * Get the tangent between two vectors.\n   * @param A\n   * @param B\n   * @returns\n   */\n  static tangent = (A: number[], B: number[]): number[] => {\n    return Vec.uni(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B squared.\n   * @param A\n   * @param B\n   */\n  static dist2 = (A: number[], B: number[]): number => {\n    return Vec.len2(Vec.sub(A, B))\n  }\n\n  /**\n   * Dist length from A to B\n   * @param A\n   * @param B\n   */\n  static dist = (A: number[], B: number[]): number => {\n    return Math.hypot(A[1] - B[1], A[0] - B[0])\n  }\n\n  /**\n   * A faster, though less accurate method for testing distances. Maybe faster?\n   * @param A\n   * @param B\n   * @returns\n   */\n  static fastDist = (A: number[], B: number[]): number[] => {\n    const V = [B[0] - A[0], B[1] - A[1]]\n    const aV = [Math.abs(V[0]), Math.abs(V[1])]\n    let r = 1 / Math.max(aV[0], aV[1])\n    r = r * (1.29289 - (aV[0] + aV[1]) * r * 0.29289)\n    return [V[0] * r, V[1] * r]\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static ang = (A: number[], B: number[]): number => {\n    return Math.atan2(Vec.cpr(A, B), Vec.dpr(A, B))\n  }\n\n  /**\n   * Angle between vector A and vector B in radians\n   * @param A\n   * @param B\n   */\n  static angle = (A: number[], B: number[]): number => {\n    return Math.atan2(B[1] - A[1], B[0] - A[0])\n  }\n\n  /**\n   * Mean between two vectors or mid vector between two vectors\n   * @param A\n   * @param B\n   */\n  static med = (A: number[], B: number[]): number[] => {\n    return Vec.mul(Vec.add(A, B), 0.5)\n  }\n\n  /**\n   * Vector rotation by r (radians)\n   * @param A\n   * @param r rotation in radians\n   */\n  static rot = (A: number[], r = 0): number[] => {\n    return [A[0] * Math.cos(r) - A[1] * Math.sin(r), A[0] * Math.sin(r) + A[1] * Math.cos(r)]\n  }\n\n  /**\n   * Rotate a vector around another vector by r (radians)\n   * @param A vector\n   * @param C center\n   * @param r rotation in radians\n   */\n  static rotWith = (A: number[], C: number[], r = 0): number[] => {\n    if (r === 0) return A\n\n    const s = Math.sin(r)\n    const c = Math.cos(r)\n\n    const px = A[0] - C[0]\n    const py = A[1] - C[1]\n\n    const nx = px * c - py * s\n    const ny = px * s + py * c\n\n    return [nx + C[0], ny + C[1]]\n  }\n\n  /**\n   * Check of two vectors are identical.\n   * @param A\n   * @param B\n   */\n  static isEqual = (A: number[], B: number[]): boolean => {\n    return A[0] === B[0] && A[1] === B[1]\n  }\n\n  /**\n   * Interpolate vector A to B with a scalar t\n   * @param A\n   * @param B\n   * @param t scalar\n   */\n  static lrp = (A: number[], B: number[], t: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.sub(B, A), t))\n  }\n\n  /**\n   * Interpolate from A to B when curVAL goes fromVAL: number[] => to\n   * @param A\n   * @param B\n   * @param from Starting value\n   * @param to Ending value\n   * @param s Strength\n   */\n  static int = (A: number[], B: number[], from: number, to: number, s = 1): number[] => {\n    const t = (Vec.clamp(from, to) - from) / (to - from)\n    return Vec.add(Vec.mul(A, 1 - t), Vec.mul(B, s))\n  }\n\n  /**\n   * Get the angle between the three vectors A, B, and C.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static ang3 = (p1: number[], pc: number[], p2: number[]): number => {\n    // this,\n    const v1 = Vec.vec(pc, p1)\n    const v2 = Vec.vec(pc, p2)\n    return Vec.ang(v1, v2)\n  }\n\n  /**\n   * Absolute value of a vector.\n   * @param A\n   * @returns\n   */\n  static abs = (A: number[]): number[] => {\n    return [Math.abs(A[0]), Math.abs(A[1])]\n  }\n\n  static rescale = (a: number[], n: number): number[] => {\n    const l = Vec.len(a)\n    return [(n * a[0]) / l, (n * a[1]) / l]\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static isLeft = (p1: number[], pc: number[], p2: number[]): number => {\n    //  isLeft: >0 for counterclockwise\n    //          =0 for none (degenerate)\n    //          <0 for clockwise\n    return (pc[0] - p1[0]) * (p2[1] - p1[1]) - (p2[0] - p1[0]) * (pc[1] - p1[1])\n  }\n\n  /**\n   * Get whether p1 is left of p2, relative to pc.\n   * @param p1\n   * @param pc\n   * @param p2\n   */\n  static clockwise = (p1: number[], pc: number[], p2: number[]): boolean => {\n    return Vec.isLeft(p1, pc, p2) > 0\n  }\n\n  /**\n   * Round a vector to the a given precision.\n   * @param a\n   * @param d\n   */\n  static toFixed = (a: number[], d = 2): number[] => {\n    return a.map((v) => +v.toFixed(d))\n  }\n\n  /**\n   * Snap vector to nearest step.\n   * @param A\n   * @param step\n   * @example\n   * ```ts\n   * Vec.snap([10.5, 28], 10) // [10, 30]\n   * ```\n   */\n  static snap(a: number[], step = 1) {\n    return [Math.round(a[0] / step) * step, Math.round(a[1] / step) * step]\n  }\n\n  /**\n   * Get the nearest point on a line with a known unit vector that passes through point A\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static nearestPointOnLineThroughPoint = (A: number[], u: number[], P: number[]): number[] => {\n    return Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n  }\n\n  /**\n   * Distance between a point and a line with a known unit vector that passes through a point.\n   * @param A Any point on the line\n   * @param u The unit vector for the line.\n   * @param P A point not on the line to test.\n   * @returns\n   */\n  static distanceToLineThroughPoint = (A: number[], u: number[], P: number[]): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineThroughPoint(A, u, P))\n  }\n\n  /**\n   * Get the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static nearestPointOnLineSegment = (\n    A: number[],\n    B: number[],\n    P: number[],\n    clamp = true\n  ): number[] => {\n    const u = Vec.uni(Vec.sub(B, A))\n    const C = Vec.add(A, Vec.mul(u, Vec.pry(Vec.sub(P, A), u)))\n\n    if (clamp) {\n      if (C[0] < Math.min(A[0], B[0])) return A[0] < B[0] ? A : B\n      if (C[0] > Math.max(A[0], B[0])) return A[0] > B[0] ? A : B\n      if (C[1] < Math.min(A[1], B[1])) return A[1] < B[1] ? A : B\n      if (C[1] > Math.max(A[1], B[1])) return A[1] > B[1] ? A : B\n    }\n\n    return C\n  }\n\n  /**\n   * Distance between a point and the nearest point on a line segment between A and B\n   * @param A The start of the line segment\n   * @param B The end of the line segment\n   * @param P The off-line point\n   * @param clamp Whether to clamp the point between A and B.\n   * @returns\n   */\n  static distanceToLineSegment = (A: number[], B: number[], P: number[], clamp = true): number => {\n    return Vec.dist(P, Vec.nearestPointOnLineSegment(A, B, P, clamp))\n  }\n\n  /**\n   * Push a point A towards point B by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   * @returns\n   */\n  static nudge = (A: number[], B: number[], d: number): number[] => {\n    return Vec.add(A, Vec.mul(Vec.uni(Vec.sub(B, A)), d))\n  }\n\n  /**\n   * Push a point in a given angle by a given distance.\n   * @param A\n   * @param B\n   * @param d\n   */\n  static nudgeAtAngle = (A: number[], a: number, d: number): number[] => {\n    return [Math.cos(a) * d + A[0], Math.sin(a) * d + A[1]]\n  }\n\n  /**\n   * Round a vector to a precision length.\n   * @param a\n   * @param n\n   */\n  static toPrecision = (a: number[], n = 4): number[] => {\n    return [+a[0].toPrecision(n), +a[1].toPrecision(n)]\n  }\n\n  /**\n   * Get an array of points (with simulated pressure) between two points.\n   * @param A The first point.\n   * @param B The second point.\n   * @param steps The number of points to return.\n   * @param ease An easing function to apply to the simulated pressure.\n   */\n  static pointsBetween = (A: number[], B: number[], steps = 6): number[][] => {\n    return Array.from(Array(steps)).map((_, i) => {\n      const t = i / (steps - 1)\n      const k = Math.min(1, 0.5 + Math.abs(0.5 - t))\n      return [...Vec.lrp(A, B, t), k]\n    })\n  }\n}\n\nexport default Vec\n"],
  "mappings": "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",
  "names": []
}
